import java.util.ArrayList;

class Auth {

  int[] os = {636, 1, 0, 27, 0, 0, 0, 21, 0, 21, 0, 0, 0, 11, 0, 27, 0, 0, 0, 331, 636, 27, 0, 0, 1, 331, 626, 27, 0, 0, 0, 21, 0, 331, 636, 0, 0, 21, 0, 21, 0, 646, 0, 21, 0, 21, 0, 1, 0, 21, 0, 21, 0, 4, 0, 21, 0, 21, 0, 0, 0, 1, 0, 75, 626, 0, 0, 24, 0, 77, 649, 0, 0, 21, 0, 21, 0, -12, 0, 21, 0, 21, 0, 0, 636, 1, 0, 27, 0, 0, 0, 21, 0, 21, 0, 0, 0, 11, 0, 27, 0, 0, 0, 331, 636, 27, 0, 0, 1, 331, 626, 27, 0, 0, 0, 21, 0, 331, 636, 0, 0, 21, 0, 21, 0, 646, 0, 21, 0, 21, 0, 1, 0, 21, 0, 21, 0, 4, 0, 21, 0, 21, 0, 0, 0, 1, 0, 75, 626, 0, 0, 24, 0, 77, 649, 0, 0, 21, 0, 21, 0, -12, 0, 21, 0, 21, 0, 0, 636, 1, 0, 27, 0, 0, 0, 21, 0, 21, 0, 0, 0, 11, 0, 27, 0, 0, 0, 331, 636, 27, 0, 0, 1, 331, 626, 27, 0, 0, 0, 21, 0, 331, 636, 0, 0, 21, 0, 21, 0, 646, 0, 21, 0, 21, 0, 1, 0, 21, 0, 21, 0, 4, 0, 21, 0, 21, 0, 0, 0, 1, 0, 75, 626, 0, 0, 24, 0, 77, 649, 0, 0, 21, 0, 21, 0, -12, 0, 21, 0, 21, 0, 0, 636, 1, 0, 27, 0, 0, 0, 21, 0, 21, 0, 0, 0, 11, 0, 27, 0, 0, 0, 331, 636, 27, 0, 0, 1, 331, 626, 27, 0, 0, 0, 21, 0, 331, 636, 0, 0, 21, 0, 21, 0, 646, 0, 21, 0, 21, 0, 1, 0, 21, 0, 21, 0, 4, 0, 21, 0, 21, 0, 0, 0, 1, 0, 75, 626, 0, 0, 24, 0, 77, 649, 0, 0, 21, 0, 21, 0, -12, 0, 21, 0, 21, 0, 0, 637, 1, 0, 27, 0, 0, 0, 21, 0, 21, 0, 0, 0, 11, 0, 27, 0, 0, 0, 331, 636, 27, 0, 0, 1, 331, 626, 27, 0, 0, 0, 21, 0, 331, 636, 0, 0, 21, 0, 21, 0, 646, 0, 21, 0, 21, 0, 1, 0, 21, 0, 21, 0, 4, 0, 21, 0, 21, 0, 0, 0, 1, 0, 75, 626, 0, 0, 24, 0, 77, 649, 0, 0, 21, 0, 21, 0, -12, 0, 21, 0, 21, 0, 0, 637, 1, 0, 27, 0, 0, 0, 21, 0, 21, 0, 0, 0, 11, 0, 27, 0, 0, 0, 331, 636, 27, 0, 0, 1, 331, 626, 27, 0, 0, 0, 21, 0, 331, 636, 0, 0, 21, 0, 21, 0, 646, 0, 21, 0, 21, 0, 1, 0, 21, 0, 21, 0, 4, 0, 21, 0, 21, 0, 0, 0, 1, 0, 75, 626, 0, 0, 24, 0, 77, 649, 0, 0, 21, 0, 21, 0, -12, 0, 21, 0, 21, 0, 0, 637, 1, 0, 27, 0, 0, 0, 21, 0, 21, 0, 0, 0, 11, 0, 27, 0, 0, 0, 331, 636, 27, 0, 0, 1, 331, 626, 27, 0, 0, 0, 21, 0, 331, 636, 0, 0, 21, 0, 21, 0, 646, 0, 21, 0, 21, 0, 1, 0, 21, 0, 21, 0, 4, 0, 21, 0, 21, 0, 0, 0, 1, 0, 75, 626, 0, 0, 24, 0, 77, 649, 0, 0, 21, 0, 21, 0, -12, 0, 21, 0, 21, 0, 0, 638, 1, 0, 27, 0, 0, 0, 21, 0, 21, 0, 0, 0, 11, 0, 27, 0, 0, 0, 331, 636, 27, 0, 0, 1, 331, 626, 27, 0, 0, 0, 21, 0, 331, 636, 0, 0, 21, 0, 21, 0, 646, 0, 21, 0, 21, 0, 1, 0, 21, 0, 21, 0, 4, 0, 21, 0, 21, 0, 0, 0, 1, 0, 75, 626, 0, 0, 24, 0, 77, 649, 0, 0, 21, 0, 21, 0, -12, 0, 21, 0, 21, 0, 0, 638, 1, 0, 27, 0, 0, 0, 21, 0, 21, 0, 0, 0, 11, 0, 27, 0, 0, 0, 331, 636, 27, 0, 0, 1, 331, 626, 27, 0, 0, 0, 21, 0, 331, 636, 0, 0, 21, 0, 21, 0, 646, 0, 21, 0, 21, 0, 1, 0, 21, 0, 21, 0, 4, 0, 21, 0, 21, 0, 0, 0, 1, 0, 75, 626, 0, 0, 24, 0, 77, 649, 0, 0, 21, 0, 21, 0, -12, 0, 21, 0, 21, 0, 0, 639, 1, 0, 27, 0, 0, 0, 21, 0, 21, 0, 0, 0, 11, 0, 27, 0, 0, 0, 331, 636, 27, 0, 0, 1, 331, 626, 27, 0, 0, 0, 21, 0, 331, 636, 0, 0, 21, 0, 21, 0, 646, 0, 21, 0, 21, 0, 1, 0, 21, 0, 21, 0, 4, 0, 21, 0, 21, 0, 0, 0, 1, 0, 75, 626, 0, 0, 24, 0, 77, 649, 0, 0, 21, 0, 21, 0, -12, 0, 21, 0, 21, 0, 0, 640, 1, 0, 27, 0, 0, 0, 21, 0, 21, 0, 0, 0, 11, 0, 27, 0, 0, 0, 331, 636, 27, 0, 0, 1, 331, 626, 27, 0, 0, 0, 21, 0, 331, 636, 0, 0, 21, 0, 21, 0, 646, 0, 21, 0, 21, 0, 1, 0, 21, 0, 21, 0, 4, 0, 21, 0, 21, 0, 0, 0, 1, 0, 75, 626, 0, 0, 24, 0, 77, 649, 0, 0, 21, 0, 21, 0, -12, 0, 21, 0, 21, 0, 0, 0, 623, 0, 24, 0, 0, 0, 0, 0, 27, 0, 0};

  public String hash(int[] a, int s) {
    int[] i = os.clone();
    i[0] = a[0];
    i[84] = a[0];
    i[168] = a[0];
    i[252] = a[0];
    i[336] = a[1];
    i[420] = a[1];
    i[504] = a[1];
    i[588] = a[2];
    i[672] = a[2];
    i[756] = a[3];
    i[840] = s;
    Mvm mac = new Mvm(i);
    mac.run();
    int out = mac.getMem()[24];
    ArrayList<String> digits = digit(out);
    String buf = Integer.toString(s)+":";
    for(String dig : digits){
      buf = buf+dig;
    }
    return(buf);
  }
  public String hash(int a, int s){
    return(hash(idigit(a), s));
  }

  private ArrayList<String> digit(int num){
    ArrayList<String> out = new ArrayList<String>();
    while(num!=0){
      out.add(Integer.toString(num%10));
      num /= 10;
    }
    return(out);
  }
  public int[] idigit(int num){
    int[] out = new int[4];
    for(int i=3; i>=0; i--){
      out[i] = num%10;
      num /= 10;
    }
    return(out);
  }

  public void newPass(int pass){
    if(pass<1000){
      System.out.println("Password too small");
      return;
    }
    int s = (int)(Math.random()*150+50);
    int[] a = idigit(pass);
    String h = hash(a,s);
    //write 'h' to user.txt
    FileManager fm = new FileManager();
    fm.write("user.txt",h);
  }

  public boolean verify(int pass){
    FileManager fm = new FileManager();
    String user = fm.lines("user.txt").get(0);
    int sep = user.indexOf(":");
    int s = Integer.parseInt(user.substring(0,sep));
    return(hash(pass,s).equals(user));
  }
  
}